#!/usr/bin/env python

from numpy import random as npr
import lib.adrsmlib as ad
import argparse


def _get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='ADRSM v' + str(version),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''
==================================================\n
ADRSM: Ancient DNA Read Simulator for Metagenomics\n
Author: Maxime Borry\n
Contact: <borry[at]shh.mpg.de>\n
Homepage & Documentation: github.com/maxibor/adrsm
==================================================
        ''')
    parser.add_argument('confFile', help="path to configuration file")
    parser.add_argument(
        '-r',
        dest='readLength',
        default=76,
        help="Average read length. Default = 76")
    parser.add_argument(
        '-n',
        dest="nbinom",
        default=8,
        help="n parameter for Negative Binomial insert length distribution. Default = 8")
    parser.add_argument(
        '-fwd',
        dest="fwdAdapt",
        default="AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNATCTCGTATGCCGTCTTCTGCTTG",
        help="Forward adaptor. Default = AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNATCTCGTATGCCGTCTTCTGCTTG")
    parser.add_argument(
        '-rev',
        dest="revAdapt",
        default="AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT",
        help="Reverse adaptor. Default = AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT")
    parser.add_argument(
        '-p',
        dest="geom_p",
        default=0.5,
        help="Geometric distribution parameter for deamination. Default = 0.5")
    parser.add_argument(
        '-m',
        dest="min",
        default=0.001,
        help="Deamination substitution base frequency. Default = 0.001")
    parser.add_argument(
        '-M',
        dest="max",
        default=0.3,
        help="Deamination substitution max frequency. Default = 0.3")
    parser.add_argument(
        '-o',
        dest="output",
        default="metagenome",
        help="Output file basename. Default = ./metagenome.*")
    parser.add_argument(
        '-s',
        dest="stats",
        default="stats.csv",
        help="Statistic file. Default = stats.csv")
    parser.add_argument(
        '-se',
        dest="seed",
        default=7357,
        help="Seed for random generator. Default = 7357")
    parser.add_argument(
        '-t',
        dest="threads",
        default=2,
        help="Number of threads for parallel processing. Default = 2")

    args = parser.parse_args()

    infile = args.confFile
    readlen = int(args.readLength)
    nbinom = int(args.nbinom)
    a1 = args.fwdAdapt
    a2 = args.revAdapt
    geom_p = float(args.geom_p)
    themin = float(args.min)
    themax = float(args.max)
    outfile = args.output
    stats = args.stats
    seed = int(args.seed)
    threads = int(args.threads)

    return(infile, readlen, nbinom, a1, a2, geom_p, themin, themax, outfile, stats, seed, threads)


def read_config(infile):
    """
    READS CONFIG FILE AND RETURNS CONFIG DICT
    """
    genomes = {}
    with open(infile, "r") as f:
        next(f)
        for line in f:
            line = line.rstrip()
            splitline = line.split(",")
            agenome = splitline[0].replace(" ", "")
            ainsert = int(splitline[1].replace(" ", ""))
            acov = float(splitline[2].replace(" ", ""))
            deambool = str(splitline[3].replace(" ", ""))
            deamination = ad.parse_yes_no(deambool)
            if len(splitline) > 4 and float(splitline[4].replace(" ", "")) != 0.0:
                mutate = True
                mutrate = float(splitline[4].replace(" ", ""))
                age = float(splitline[5].replace(" ", ""))
            else:
                mutate = False
                mutrate = 0
                age = 0

            genomes[agenome] = {'size': ainsert,
                                'cov': acov, 'deam': deamination, 'mutate': mutate, 'mutrate': mutrate, 'age': age}
    return(genomes)


if __name__ == "__main__":
    version = "0.9.3"
    INFILE, READLEN, NBINOM, A1, A2, GEOM_P, THEMIN, THEMAX, OUTFILE, STATS, SEED, PROCESS = _get_args()

    MINLENGTH = 20
    npr.seed(SEED)
    fastq_list = []
    stat_dict = {}
    all_genomes = read_config(INFILE)
    for agenome in all_genomes.keys():
        stat_and_run = ad.run_read_simulation_multi(INFILE=agenome,
                                                    COV=all_genomes[agenome]['cov'],
                                                    READLEN=READLEN,
                                                    INSERLEN=all_genomes[agenome]['size'],
                                                    NBINOM=NBINOM,
                                                    A1=A1,
                                                    A2=A2,
                                                    MINLENGTH=MINLENGTH,
                                                    MUTATE=all_genomes[agenome]['mutate'],
                                                    MUTRATE=all_genomes[agenome]['mutrate'],
                                                    AGE=all_genomes[agenome]['age'],
                                                    DAMAGE=all_genomes[agenome]['deam'],
                                                    GEOM_P=GEOM_P,
                                                    THEMIN=THEMIN,
                                                    THEMAX=THEMAX,
                                                    PROCESS=PROCESS,
                                                    FASTQ_OUT=OUTFILE)
        stat_dict[ad.get_basename(agenome)] = stat_and_run

    ad.write_stat(stat_dict=stat_dict, stat_out=STATS)
    print("\n-- ADRSM v" + str(version) +
          " finished generating this mock metagenome --")
    print("-- FASTQ files written to " + OUTFILE +
          ".1.fastq and " + OUTFILE + ".2.fastq --")
    print("-- Statistic file written to " + STATS + " --")
